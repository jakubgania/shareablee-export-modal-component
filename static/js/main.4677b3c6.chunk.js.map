{"version":3,"sources":["Component/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["Modal","state","apiPostman","apiDjango","responseStatusFlag","showResponseSuccessAlert","showResponseErrorAlert","copleteFieldsAlert","scheduleAction","reportName","exportReportName","exportReportFormat","exportReportEmail","exportReportSchedule","exportReportDate","exportReportTime","exportReportDayOfWeek","onClose","props","resetStatuses","setState","completeFieldsAlert","handleChangeReportName","event","target","name","value","changeScheduleAction","action","submitExportReportForm","length","preventDefault","exportReportFormData","format","email","schedule","date","time","dayOfWeek","axios","post","then","response","statusCode","catch","error","console","log","data","status","headers","request","message","config","this","show","className","onSubmit","required","placeholder","onChange","type","defaultChecked","onClick","selected","React","Component","App","showModal","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4677b3c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './modal.css';\r\n\r\nimport axios from 'axios';\r\n\r\nclass Modal extends React.Component {\r\n  state = {\r\n    apiPostman: 'https://postman-echo.com/post',\r\n    apiDjango: 'https://api.jakubgania.io/django-endpoint/',\r\n    responseStatusFlag: false,\r\n    showResponseSuccessAlert: false,\r\n    showResponseErrorAlert: false,\r\n    copleteFieldsAlert: false,\r\n    scheduleAction: 'noRepeat',\r\n    reportName: '',\r\n    exportReportName: '',\r\n    exportReportFormat: 'excel',\r\n    exportReportEmail: '',\r\n    exportReportSchedule: 'noRepeat',\r\n    exportReportDate: '',\r\n    exportReportTime: '',\r\n    exportReportDayOfWeek: ''\r\n  }\r\n\r\n  onClose = () => {\r\n    this.props.onClose && this.props.onClose()\r\n    this.resetStatuses()\r\n  };\r\n\r\n  resetStatuses = () => {\r\n    this.setState({\r\n      showResponseSuccessAlert: false,\r\n      showResponseErrorAlert: false,\r\n      completeFieldsAlert: false\r\n    })\r\n  }\r\n\r\n  handleChangeReportName = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  changeScheduleAction = (action) => {\r\n    this.setState({\r\n      scheduleAction: action,\r\n    })\r\n  }\r\n\r\n  submitExportReportForm = event => {\r\n    if (this.state.exportReportName.length === 0 || this.state.exportReportEmail.length === 0) {\r\n      this.setState({\r\n        completeFieldsAlert: true\r\n      })\r\n\r\n      return null\r\n    }\r\n    \r\n    event.preventDefault();\r\n\r\n    const exportReportFormData = {\r\n      name: this.state.exportReportName,\r\n      format: this.state.exportReportFormat,\r\n      email: this.state.exportReportEmail,\r\n      schedule: this.state.exportReportSchedule,\r\n      date: this.state.exportReportDate,\r\n      time: this.state.exportReportTime,\r\n      dayOfWeek: this.state.exportReportDayOfWeek\r\n    }\r\n\r\n    axios.post(this.state.apiPostman, { exportReportFormData })\r\n      .then(response => {\r\n        if (response.statusCode === 200) {\r\n          this.setState({\r\n            showResponseSuccessAlert: true\r\n          })\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({\r\n          showResponseErrorAlert: true\r\n        })\r\n\r\n        if (error.response) {\r\n          console.log('Error data ', error.response.data);\r\n          console.log('Error status ', error.response.status);\r\n          console.log('Error headers ', error.response.headers);\r\n        } else if (error.request) {\r\n          console.log('Error request ', error.request)\r\n        } else {\r\n          console.log('Error', error.message)\r\n        }\r\n\r\n        console.log('Error config ', error.config)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.show) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"modal-container\">\r\n        <form onSubmit={this.submitExportReportForm}>\r\n          <div className=\"modal-container-header\">\r\n            Export Report\r\n          </div>\r\n          <div className=\"modal-container-body\">\r\n            <div className=\"modal-container-body-item\">\r\n              <div className=\"modal-container-body-section-title\">\r\n                Report name\r\n              </div>\r\n              <div className=\"modal-container-body-section-input\">\r\n                <input className=\"input\" required placeholder=\"Shareablee Report\" name=\"exportReportName\" onChange={this.handleChangeReportName} />\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-container-body-item\">\r\n              <div className=\"modal-container-body-section-title\">\r\n                Format\r\n              </div>\r\n              <div className=\"modal-container-body-section-input\">\r\n                <div className=\"radio-button-section\">\r\n                  <input type=\"radio\" name=\"exportReportFormat\" onChange={this.handleChangeReportName} value=\"excel\" defaultChecked/> Excel\r\n                </div>\r\n                <div className=\"radio-button-section\">\r\n                  <input type=\"radio\" name=\"exportReportFormat\" onChange={this.handleChangeReportName} value=\"csv\" /> CSV\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-container-body-item\">\r\n              <div className=\"modal-container-body-section-title\">\r\n                E-mail to\r\n              </div>\r\n              <div className=\"modal-container-body-section-input\">\r\n                <input type=\"email\" required className=\"input\" placeholder=\"clinet@company.com\" name=\"exportReportEmail\" onChange={this.handleChangeReportName} />\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-container-body-item\">\r\n              <div className=\"modal-container-body-section-title\">\r\n                Schedule\r\n              </div>\r\n              <div className=\"modal-container-body-section-input\">\r\n                <div className=\"radio-button-section\">\r\n                  <input type=\"radio\" onClick={() => this.changeScheduleAction('noRepeat')} name=\"exportReportSchedule\" onChange={this.handleChangeReportName} value=\"noRepeat\" defaultChecked/> No Repeat\r\n                </div>\r\n                <div className=\"radio-button-section\">\r\n                  <input type=\"radio\" onClick={() => this.changeScheduleAction('specificDate')} name=\"exportReportSchedule\" onChange={this.handleChangeReportName} value=\"specificDate\" /> Specific Date\r\n                </div>\r\n                <div className=\"radio-button-section\">\r\n                  <input type=\"radio\" onClick={() => this.changeScheduleAction('daily')} name=\"exportReportSchedule\" onChange={this.handleChangeReportName} value=\"daily\" /> Daily\r\n                </div>\r\n                <div className=\"radio-button-section\">\r\n                  <input type=\"radio\" onClick={() => this.changeScheduleAction('weekly')} name=\"exportReportSchedule\" onChange={this.handleChangeReportName} value=\"weekly\" /> Weekly\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-container-body-item\">\r\n              <div className=\"modal-container-body-section-title\">\r\n                Date\r\n              </div>\r\n              <div className=\"modal-container-body-section-input\">\r\n                { this.scheduleAction === 'noRepeat'  &&\r\n                  <div className=\"schedule-section\" />\r\n                }\r\n\r\n                { this.state.scheduleAction === 'specificDate' &&\r\n                  <div className=\"schedule-section\">\r\n                    <div className=\"short-input-section\">\r\n                      <input className=\"input date\" type=\"date\" value=\"2019-05-22\" name=\"exportReportDate\" onChange={this.handleChangeReportName}/>\r\n                    </div>\r\n                    <div className=\"at-item\">\r\n                      at\r\n                    </div>\r\n                    <div className=\"short-input-section\">\r\n                      <input className=\"input\" type=\"time\" value=\"13:00\" name=\"exportReportTime\" onChange={this.handleChangeReportName}/>\r\n                    </div>\r\n                  </div>\r\n                }\r\n                \r\n                { this.state.scheduleAction === 'daily' &&\r\n                  <div className=\"schedule-section\">\r\n                    <input className=\"input\" type=\"time\" value=\"13:00\" name=\"exportReportTime\" onChange={this.handleChangeReportName}/>\r\n                  </div>\r\n                }\r\n                \r\n                { this.state.scheduleAction === 'weekly' &&\r\n                  <div className=\"schedule-section\">\r\n                    <div className=\"select-section\">\r\n                      <select className=\"select-day-of-week\" name=\"exportReportDayOfWeek\" onChange={this.handleChangeReportName}>\r\n                        <option value=\"monday\">\r\n                          Monday\r\n                        </option>\r\n                        <option value=\"tuesday\">\r\n                          Tuesday\r\n                        </option>\r\n                        <option value=\"wednesday\" selected>\r\n                          Wednesday\r\n                        </option>\r\n                        <option value=\"thursday\">\r\n                          Thursday\r\n                        </option>\r\n                        <option value=\"friday\">\r\n                          Friday\r\n                        </option>\r\n                        <option value=\"saturday\">\r\n                          Saturday\r\n                        </option>\r\n                        <option value=\"sunday\">\r\n                          Sunday\r\n                        </option>\r\n                      </select>\r\n                    </div>\r\n                    <div className=\"at-item\">\r\n                      at\r\n                    </div>\r\n                    <div>\r\n                      <input className=\"input\" type=\"time\" value=\"13:00\" name=\"exportReportTime\" onChange={this.handleChangeReportName}/>\r\n                    </div>\r\n                  </div>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"modal-container-footer\">\r\n            <button type=\"button\" onClick={this.onClose} className=\"modal-button cancel-button\">\r\n              Cancel\r\n            </button>\r\n            <button type=\"submit\" onClick={this.submitExportReportForm} className=\"modal-button submit-button\">\r\n              OK\r\n            </button>\r\n          </div>\r\n          { this.state.showResponseErrorAlert &&\r\n            <div className=\"alert error\">\r\n              Sending error\r\n            </div>\r\n          }\r\n\r\n          {this.state.showResponseSuccessAlert &&\r\n            <div className=\"alert success\">\r\n              Sending success\r\n            </div>\r\n          }\r\n\r\n          {this.state.copleteFieldsAlert &&\r\n            <div className=\"alert error\">\r\n              Complete fields !\r\n            </div>\r\n          }\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default Modal","import React from 'react';\r\nimport Modal from './Component/Modal';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    show: false\r\n  };\r\n  showModal = () => {\r\n    this.setState({\r\n      show: !this.state.show\r\n    })\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-button-container\">\r\n          <button className=\"export-report-button\" onClick={this.showModal}>\r\n            Export Report\r\n          </button>\r\n          <Modal onClose={this.showModal} show={this.state.show}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}